#!/usr/bin/env python3
# This file is subject to GPLv3 license. See file COPYING for license details.
# Copyright 2018 woky

import sys, csv
import argparse
import datetime as dt
import calendar
import itertools
from dateutil.relativedelta import *
from tabulate import tabulate, TableFormat, Line, DataRow
from common import *
from collections import namedtuple

parser = argparse.ArgumentParser()
parser.add_argument('--format',       '-f', choices=['table', 'csv'], default='table')
parser.add_argument('--project',      '-p', metavar='CLIENT%[/PROJECT%]')
parser.add_argument('--year',         '-y', type=int)
parser.add_argument('--month',        '-m', type=int, action='append', nargs='?', default=[])
parser.add_argument('--week',         '-w', type=int, action='append', nargs='?', default=[])
parser.add_argument('--day-hours',    '-d', action='store_true')
parser.add_argument('--redact',       '-r', action='store_true')
parser.add_argument('--days-off',     '-o', action='store_true')
parser.add_argument('--show-zeros',   '-z', action='store_true')
parser.add_argument('--split-weeks',  '-W', action='store_true')
parser.add_argument('--split-months', '-M', action='store_true')
parser.add_argument('--totals',       '-t', action='store_true')
args = parser.parse_args()

def delta_to_hours(delta):
    t_s = int(delta.total_seconds())
    h = t_s / 3600
    m = int(round((t_s % 3600) / 60, 0))
    return h, m

def format_hours_dec(h): return '{:.2f}'.format(round(h, 2))
def format_hours_h_mm(h, m): return '{:2}:{:02}'.format(int(h), m)
def format_hours_hm(h, m):  return '{}h {}m'.format(int(h), m)

def format_delta_for_row(delta):
    if args.show_zeros or delta.total_seconds() > 0:
        hh, mm = delta_to_hours(delta)
        hd  = format_hours_dec(hh)
        hmm = format_hours_h_mm(hh, mm)
        return hd, hmm
    else:
        return '', ''

Column = namedtuple('Column', [ 'name', 'alignment' ])
columns = dict([ (c.name, c) for c in [
    Column('Id',      'right'),
    Column('Date',    'left'),
    Column('CW',      'right'),
    Column('DoW',     'left'),
    Column('In',      'right'),
    Column('Out',     'right'),
    Column('Hours',   'right'),
    Column('H:MM',    'right'),
    Column('Client',  'left'),
    Column('Project', 'left'),
    Column('Extra',   'left'),
]])

tablefmt = TableFormat(
        lineabove        = None,
        linebelowheader  = Line('', '-', '  ', ''),
        linebetweenrows  = None,
        linebelow        = Line('', '-', '--', ''),
        headerrow        = DataRow('', '  ', ''),
        datarow          = DataRow('', '  ', ''),
        padding          = 0,
        with_header_hide = None)

class Printer:

    def __init__(self, all_col_names, req_col_names, elem_to_row, elem_to_date, elem_to_delta):
        name_to_idx = dict([ (n, i) for i, n in enumerate(all_col_names) ])
        self.req_idxs = [ name_to_idx[n] for n in req_col_names if n in name_to_idx ]
        self.header = self.project_row(all_col_names)
        self.elem_to_row = elem_to_row
        self.elem_to_date = elem_to_date
        self.elem_to_delta = elem_to_delta

    def project_row(self, row):
        return [ row[i] for i in self.req_idxs ]

    def create_table_rows(self, elems):
        rows = []
        for e1, e2 in itertools.zip_longest(elems, elems[1:]):
            rows.append(self.project_row(self.elem_to_row(e1)))
            if not e2:
                continue
            separated = False
            if args.split_weeks:
                w1 = self.elem_to_date(e1).isocalendar()[1]
                w2 = self.elem_to_date(e2).isocalendar()[1]
                if w1 != w2:
                    rows.append([])
                    separated = True
            if not separated and args.split_months:
                m1 = self.elem_to_date(e1).month
                m2 = self.elem_to_date(e2).month
                if m1 != m2:
                    rows.append([])
                    separated = True
        return rows

    def print_table(self, elems):
        rows = self.create_table_rows(elems)
        kwargs = {}
        kwargs['floatfmt'] = '.2f'
        kwargs['headers'] = self.header
        if args.totals:
            kwargs['tablefmt'] = tablefmt
        else:
            kwargs['tablefmt'] = tablefmt._replace(linebelow=None)
        # https://bitbucket.org/astanin/python-tabulate/issues/155
        if rows:
            kwargs['colalign'] = [ columns[n].alignment for n in self.header ]
        print(tabulate(rows, **kwargs))

        if args.totals:
            delta = sum([ self.elem_to_delta(e) for e in elems ], dt.timedelta())
            hh, mm = delta_to_hours(delta)
            hd = format_hours_dec(hh)
            hm = format_hours_hm(hh, mm)
            print('Total hours = {} ({})'.format(hd, hm))

    def print_csv(self, elems):
        writer = csv.writer(sys.stdout)
        writer.writerow(self.header)
        for e in elems:
            writer.writerow(self.project_row(self.elem_to_row(e)))

    def print(self, elems):
        if args.format == 'csv':
            self.print_csv(elems)
        elif args.format == 'table':
            self.print_table(elems)
        else:
            raise ValueError()

ENTRIES_COLUMNS  = 'Id,Date,CW,DoW,In,Out,Hours,H:MM,Client,Project,Extra'.split(',')
DAYHOURS_COLUMNS = 'Date,CW,DoW,Hours,H:MM,Client,Project'.split(',')

def create_row_entry(e):
    hd, hmm = format_delta_for_row(e.end - e.start)
    return [
        e.id,
        e.start.date(),
        e.start.strftime('%V'),
        e.start.strftime('%a'),
        e.start.strftime('%H:%M'),
        e.end.strftime('%H:%M'),
        hd,
        hmm,
        e.client,
        e.project,
        e.extra
    ]

def create_row_dayhours(dh):
    hd, hmm = format_delta_for_row(dh.hours)
    return [
        dh.date,
        dh.date.strftime('%V'),
        dh.date.strftime('%a'),
        hd,
        hmm,
        dh.client,
        dh.project
    ]

if args.redact:
    entries_columns  = 'Date,CW,DoW,In,Out,Hours,H:MM'.split(',')
    dayhours_columns = 'Date,CW,DoW,Hours,H:MM'.split(',')
else:
    entries_columns  = ENTRIES_COLUMNS
    dayhours_columns = DAYHOURS_COLUMNS

printer_entries = Printer(
        ENTRIES_COLUMNS,
        entries_columns,
        create_row_entry,
        lambda e: e.start,
        lambda e: e.end - e.start)

printer_dayhours = Printer(
        DAYHOURS_COLUMNS,
        dayhours_columns,
        create_row_dayhours,
        lambda e: e.date,
        lambda e: e.hours)

with open_default_db() as db:
    today  = dt.date(args.year, 1, 1) if args.year else dt.date.today()
    months = [ month_num_to_date(num or 0, today) for num in args.month ]
    weeks  = [  week_num_to_date(num or 0, today) for num in args.week ]

    client, project = None, None
    if args.project:
        if '/' in args.project:
            (client, project) = args.project.split('/')
        else:
            client = args.project

    entries = db.get_entries(client, project, months, weeks)

    if args.day_hours:
        dayhours_by_date = DayHours.from_entries(entries)

        if args.days_off:
            dayoff = lambda d: [DayHours('', '', d, dt.timedelta())]
            for m in months:
                for i in range(0, calendar.monthrange(m.year, m.month)[1]):
                    d = m + dt.timedelta(days=i)
                    if not d in dayhours_by_date:
                        dayhours_by_date[d] = dayoff(d)
            for w in weeks:
                for i in range(0, 7):
                    d = w + dt.timedelta(days=i)
                    if not d in dayhours_by_date:
                        dayhours_by_date[d] = dayoff(d)

        dayhours = list(itertools.chain(*dayhours_by_date.values()))
        dayhours = sorted(dayhours, key=lambda dh: (dh.date, dh.client, dh.project))
        printer_dayhours.print(dayhours)
    else:
        printer_entries.print(entries)
